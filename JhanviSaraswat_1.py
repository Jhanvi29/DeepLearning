# -*- coding: utf-8 -*-
"""HW-02-01_DL.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CVGnyYVetRMMgkWnPaZQVR7Ps4PcXWXM
"""

import torchvision.transforms as tvt
from PIL import Image
import matplotlib.pyplot as plt
import numpy as np
import torch

img1 = Image.open('Stop1.jpg')
img2 = Image.open('Stop2.jpg')

"""Plotting the two images side by side"""

plt.subplot(1,2, 1)
plt.imshow(img1)

plt.subplot(1,2,2)
plt.imshow(img2)

width , height = img2.size
print(width , height)

random_affine = tvt.RandomAffine((0 , 60))
img2_affine = random_affine(img2)

plt.imshow(img2_affine)

img2_affine.size

source = torch.FloatTensor([[200,200],[200,400],[700,200],[700,400]])
dest = torch.FloatTensor([[300,190],[300,350],[800,190],[800,390]])

tran_per = tvt.functional.perspective(img2,source,dest)

plt.subplot(1,2, 1)
plt.imshow(tran_per)

plt.subplot(1,2,2)
plt.imshow(img1)

image = np.array(img1)
r, g, b = image[:,:,0], image[:,:,1], image[:,:,2]

# Create a histogram for each channel
r_hist, _ = np.histogram(r, bins=256, range=(0,256))
g_hist, _ = np.histogram(g, bins=256, range=(0,256))
b_hist, _ = np.histogram(b, bins=256, range=(0,256))

r_prob = r_hist/(r_hist.sum()) 
g_prob = g_hist/(g_hist.sum()) 
b_prob = b_hist/(b_hist.sum())

image_perspective = np.array(tran_per)
r, g, b = image_perspective[:,:,0], image_perspective[:,:,1], image_perspective[:,:,2]
r_per, _ = np.histogram(r, bins=256, range=(0,256))
g_per, _ = np.histogram(g, bins=256, range=(0,256))
b_per, _ = np.histogram(b, bins=256, range=(0,256))

r_per_prob = r_per/(r_per.sum()) 
g_per_prob = g_per/(r_per.sum()) 
b_per_prob = b_per/(r_per.sum())

from scipy.stats import wasserstein_distance

wasserstein_distance(r_prob, r_per_prob)

wasserstein_distance(g_prob, g_per_prob)

wasserstein_distance(b_prob, b_per_prob)